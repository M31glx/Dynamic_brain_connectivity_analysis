clear all
clc
close all

%%%%%%%%%%%%% Temporal complexity analysis of rsfMRI %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This script performs effect size analysis of the paper and reproduces
% Figure 6.
%
% Dependencies:
%             - effect_size_measures: A function implementing different
%                                     measures for effect-size analysis. The code is written by 
%                                     Harald Hentschke (University Hospital of Tübingen) and 
%                                     Maik Stüttgen (University Medical Center Mainz)
%                                     For additional information see Hentschke and Stüttgen, 
%                                     Eur J Neurosci 34:1887-1894, 2011
%
% Written by : Amir Omidvarnia, PhD
%              Medical Image Processing lab (MIPLAB),
%              EPFL, Geneva, Switzerland
% Email      : amir.omidvarnia@gmail.com
% 2019 - 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reference: A. Omidvarnia, A. Zalesky, S. Mansour, D. Van De Ville, G.
% Jackson; M. Pedersen, 'Temporal complexity of fMRI is reproducible and
% correlates with higher order cognition', To appear in NeuroImage, 2021
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Define the necessary file/folder paths and parameters
Home_dir              = [pwd filesep 'MATLAB_codes']; % The home folder including all MATLAB codes of the paper. A sub-folder called 'Saved_Results' will
                                                      % be created inside Home_dir in which all analysis results will be copied.

N_ROI                 = 379;
N_scale               = 25;                      % Number of scales for MSE
dim_m                 = 2;                       % Embedding dimension for MSE
tol_r                 = .15;                     % Tolerance r for MSE: 0.5 or 0.15

MSE_folder_DS0        = [Home_dir filesep 'Saved_Results' filesep 'MSE_fMRI_DS0']; % Location of the MSE results for the original data with no downsampling
MSE_folder_DS2        = [Home_dir filesep 'Saved_Results' filesep 'MSE_fMRI_DS2']; % Location of the MSE results for the original data at the downsampling rate of 2
MSE_folder_DS4        = [Home_dir filesep 'Saved_Results' filesep 'MSE_fMRI_DS4']; % Location of the MSE results for the original data at the downsampling rate of 4

if(tol_r==0.5)
    MSE_DS0_mat_file  = [MSE_folder_DS0 filesep 'MSE_Glasser_r05_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
    MSE_DS2_mat_file  = [MSE_folder_DS2 filesep 'MSE_Glasser_r05_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
    MSE_DS4_mat_file  = [MSE_folder_DS4 filesep 'MSE_Glasser_r05_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
elseif(tol_r==0.15)
    MSE_DS0_mat_file  = [MSE_folder_DS0 filesep 'MSE_Glasser_r015_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
    MSE_DS2_mat_file  = [MSE_folder_DS2 filesep 'MSE_Glasser_r015_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
    MSE_DS4_mat_file  = [MSE_folder_DS4 filesep 'MSE_Glasser_r015_m' num2str(dim_m) '.mat']; % Filename of thefinal results in mat file
end

%% Load MSE results generated by 'Extract_MSE_of_fMRI.m'
if(~exist(MSE_DS0_mat_file, 'file'))
    disp('Please generate the MSE results of rsfMRI by running the script ''Extract_MSE_of_fMRI.m'' first!')
    return
else
    %%% Load MSE results
    out                   = load(MSE_DS0_mat_file);
    Glasser_MSE_maps_DS0  = out.Glasser_MSE_maps; %  N_ROI x N_scale x N_subj x N_run
    bad_subjects_DS0      = out.bad_subjects;
end

if(~exist(MSE_DS2_mat_file, 'file'))
    disp('Please generate the MSE results of rsfMRI by running the script ''Extract_MSE_of_fMRI.m'' first!')
    return
else
    %%% Load MSE results
    out                   = load(MSE_DS2_mat_file);
    Glasser_MSE_maps_DS2  = out.Glasser_MSE_maps; %  N_ROI x N_scale x N_subj x N_run
    bad_subjects_DS2      = out.bad_subjects;
end

if(~exist(MSE_DS4_mat_file, 'file'))
    disp('Please generate the MSE results of rsfMRI by running the script ''Extract_MSE_of_fMRI.m'' first!')
    return
else
    %%% Load MSE results
    out                   = load(MSE_DS4_mat_file);
    Glasser_MSE_maps_DS4  = out.Glasser_MSE_maps; %  N_ROI x N_scale x N_subj x N_run
    bad_subjects_DS4      = out.bad_subjects;
end

%% Load the associated Yeo's ordering of 7 RSNs
tmp                  = load([Home_dir filesep 'Sina_match_Yeo.mat']);
yeoROIs              = tmp.ind_full;
yeoROIs              = yeoROIs(1:N_ROI);  % Labels of 7 RSNs (from -1 to 7 --> -1 being subcortical networks)
N_RSN                = 8;

%%% Sort the ROI labels
[yeoROIs_sorted, yeoROIs_sorted_ind] = sort(yeoROIs);
yeoOrder_sorted                      = yeoROIs_sorted_ind;
Yeo_RSN_names                        = {'SUBC' 'VIS' 'SM' 'DA' 'VA' 'L' 'FP' 'DMN'};
Yeo_RSN_names                        = Yeo_RSN_names(1:N_RSN);
reordered_RSNs                       = [7 4 8 2 3 5 1 6];
Yeo_RSN_names                        = Yeo_RSN_names(reordered_RSNs);
yeoLabels                            = unique(yeoROIs_sorted);

%% Remove problematic subjects 
bad_subjects_DS0         = unique(bad_subjects_DS0);
Glasser_MSE_maps_DS0(:, :, bad_subjects_DS0, :)         = [];
bad_subjects_DS2         = unique(bad_subjects_DS2);
Glasser_MSE_maps_DS2(:, :, bad_subjects_DS2, :)         = [];
bad_subjects_DS4         = unique(bad_subjects_DS4);
Glasser_MSE_maps_DS4(:, :, bad_subjects_DS4, :)         = [];

N_subj                   = size(Glasser_MSE_maps_DS0,3);

%% Compute the complexity index
MSE_fMRI             = squeeze(mean(Glasser_MSE_maps_DS0,4)); % Mean Hurst exponent map over fMRI runs
MSE_CI_DS0           = zeros(N_ROI, N_subj); % Complexity index (area under the MSE curve) for all ROIs and all subjects
for n_subj = 1 : N_subj
    MSE_CI_DS0(:, n_subj) = trapz(1:N_scale, squeeze(MSE_fMRI(:, :, n_subj)),2)/N_scale;
end
clear MSE_fMRI

MSE_fMRI             = squeeze(mean(Glasser_MSE_maps_DS2,4)); % Mean Hurst exponent map over fMRI runs
MSE_CI_DS2           = zeros(N_ROI, N_subj); % Complexity index (area under the MSE curve) for all ROIs and all subjects
for n_subj = 1 : N_subj
    MSE_CI_DS2(:, n_subj) = trapz(1:N_scale, squeeze(MSE_fMRI(:, :, n_subj)),2)/N_scale;
end
clear MSE_fMRI

MSE_fMRI             = squeeze(mean(Glasser_MSE_maps_DS4,4)); % Mean Hurst exponent map over fMRI runs
MSE_CI_DS4           = zeros(N_ROI, N_subj); % Complexity index (area under the MSE curve) for all ROIs and all subjects
for n_subj = 1 : N_subj
    MSE_CI_DS4(:, n_subj) = trapz(1:N_scale, squeeze(MSE_fMRI(:, :, n_subj)),2)/N_scale;
end
clear MSE_fMRI

%% Extract RSN-wise MSE curves from Yeo's atlas
MSE_RSNs_DS0         = zeros(N_subj, N_RSN); % N_subj x N_RSN
MSE_RSNs_DS2         = zeros(N_subj, N_RSN); % N_subj x N_RSN
MSE_RSNs_DS4         = zeros(N_subj, N_RSN); % N_subj x N_RSN
for n_yeo = 1 : N_RSN
    
    RSN_ind                 = find(yeoROIs_sorted==yeoLabels(n_yeo));
    
    MSE_fMRI_tmp            = MSE_CI_DS0(RSN_ind, :);
    MSE_RSNs_DS0(:, n_yeo)  = squeeze(nanmean(MSE_fMRI_tmp,1)); clear MSE_fMRI_tmp
    
    MSE_fMRI_tmp            = MSE_CI_DS2(RSN_ind, :);
    MSE_RSNs_DS2(:, n_yeo)  = squeeze(nanmean(MSE_fMRI_tmp,1)); clear MSE_fMRI_tmp
    
    MSE_fMRI_tmp            = MSE_CI_DS4(RSN_ind, :);
    MSE_RSNs_DS4(:, n_yeo)  = squeeze(nanmean(MSE_fMRI_tmp,1)); clear MSE_fMRI_tmp
    
end
    
MSE_RSNs_DS0   = MSE_RSNs_DS0(:, reordered_RSNs);
MSE_RSNs_DS2   = MSE_RSNs_DS2(:, reordered_RSNs);
MSE_RSNs_DS4   = MSE_RSNs_DS4(:, reordered_RSNs);

%% Effect size analysis
N_bootstrap      = 2000;
MSE_CI_DS0_stats = cell(N_RSN*(N_RSN-1)/2, 1);
MSE_CI_DS2_stats = cell(N_RSN*(N_RSN-1)/2, 1);
MSE_CI_DS4_stats = cell(N_RSN*(N_RSN-1)/2, 1);
RSN_pairs        = cell(N_RSN*(N_RSN-1)/2, 1);

Hedges_g_DS0     = zeros(N_RSN,N_RSN);           % Pair-wise Hedges's g measures across RSNs
Hedges_DS0       = zeros(N_RSN*(N_RSN-1)/2, 1);  % The vectorized Hedges g measures across all RSNs
Conf_int1_DS0    = zeros(N_RSN*(N_RSN-1)/2, 1);  % Lower limit of the confidence interval of the Hedges g after permutation testing
Conf_int2_DS0    = zeros(N_RSN*(N_RSN-1)/2, 1);  % Higher limit of the confidence interval of the Hedges g after permutation testing
pValue_DS0       = zeros(N_RSN*(N_RSN-1)/2, 1);  % P-value of the Hedges g measures after permutation testing

Hedges_g_DS2     = zeros(N_RSN,N_RSN);
Hedges_DS2       = zeros(N_RSN*(N_RSN-1)/2, 1);
Conf_int1_DS2    = zeros(N_RSN*(N_RSN-1)/2, 1);
Conf_int2_DS2    = zeros(N_RSN*(N_RSN-1)/2, 1);
pValue_DS2       = zeros(N_RSN*(N_RSN-1)/2, 1);

Hedges_g_DS4     = zeros(N_RSN,N_RSN);
Hedges_DS4       = zeros(N_RSN*(N_RSN-1)/2, 1);
Conf_int1_DS4    = zeros(N_RSN*(N_RSN-1)/2, 1);
Conf_int2_DS4    = zeros(N_RSN*(N_RSN-1)/2, 1);
pValue_DS4       = zeros(N_RSN*(N_RSN-1)/2, 1);


s = 0;
for n_rsn = 1 : N_RSN
    
    CI_X     = MSE_RSNs_DS0(:,n_rsn);
    CI_X_DS2 = MSE_RSNs_DS2(:,n_rsn);
    CI_X_DS4 = MSE_RSNs_DS4(:,n_rsn);
    
    for n_rsn2 = (n_rsn+1) : N_RSN
        
        s            = s + 1;
        RSN_pairs{s} = [Yeo_RSN_names{n_rsn} ' vs ' Yeo_RSN_names{n_rsn2}];
        
        %% Original values
        CI_Y         = MSE_RSNs_DS0(:,n_rsn2);
        
        %%% Effect size analysis: nBoot for bootstrapping and confidence
        %%% interval estimation. isDep is 1 when X and Y are paired.
        stats                       = effect_size_measures(CI_X,CI_Y,'hedgesg','isDep',1,'nBoot',N_bootstrap);
        MSE_CI_DS0_stats{s}         = stats;
        Hedges_g_DS0(n_rsn,n_rsn2) = abs(stats.hedgesg);
        Conf_int1_DS0(s)            = stats.hedgesgCi(1);
        Conf_int2_DS0(s)            = stats.hedgesgCi(2);
        pValue_DS0(s)               = stats.t.p;
        Hedges_DS0(s)               = stats.hedgesg;
        clear stats CI_Y
        
        %% Downsampling of rate 2
        CI_Y                        = MSE_RSNs_DS2(:,n_rsn2);
        
        %%% Effect size analysis: nBoot for bootstrapping and confidence
        %%% interval estimation. isDep is 1 when X and Y are paired.
        stats                       = effect_size_measures(CI_X_DS2,CI_Y,'hedgesg','isDep',1,'nBoot',N_bootstrap);
        MSE_CI_DS2_stats{s}         = stats;
        Hedges_g_DS2(n_rsn,n_rsn2) = abs(stats.hedgesg);
        Conf_int1_DS2(s)            = stats.hedgesgCi(1);
        Conf_int2_DS2(s)            = stats.hedgesgCi(2);
        pValue_DS2(s)               = stats.t.p;
        Hedges_DS2(s)               = stats.hedgesg;
        clear stats CI_Y
        
        %% Downsampling of rate 4
        CI_Y                        = MSE_RSNs_DS4(:,n_rsn2);
        
        %%% Effect size analysis: nBoot for bootstrapping and confidence
        %%% interval estimation. isDep is 1 when X and Y are paired.
        stats                       = effect_size_measures(CI_X_DS4,CI_Y,'hedgesg','isDep',1,'nBoot',N_bootstrap);
        MSE_CI_DS4_stats{s}         = stats;
        Hedges_g_DS4(n_rsn,n_rsn2) = abs(stats.hedgesg);
        Conf_int1_DS4(s)            = stats.hedgesgCi(1);
        Conf_int2_DS4(s)            = stats.hedgesgCi(2);
        pValue_DS4(s)               = stats.t.p;
        Hedges_DS4(s)               = stats.hedgesg;
        clear stats CI_Y
        
        disp(['Analysis of the RSN ' num2str(n_rsn) ' vs RSN ' num2str(n_rsn2) ' was completed!']) 
    end
    
end

%% Plot   
figure1 = figure;

%%% Plot 1
subplot1 = subplot(1,3,1,'Parent',figure1);
hold(subplot1,'on');
image(Hedges_g_DS0,'Parent',subplot1,'CDataMapping','scaled');
title('Original');
axis(subplot1,'tight');
axis(subplot1,'ij');
set(subplot1,'CLim',[-0.0708 6.3779],'DataAspectRatio',[1 1 1],'Layer','top','XTick', 1:N_RSN,'XTickLabel',...
    Yeo_RSN_names,'YTick',1:N_RSN,'YTickLabel',Yeo_RSN_names); caxis([0 3])
tmp = colormap; tmp(1,:) = [1 1 1]; colormap(tmp)

%%% Plot 2
subplot2 = subplot(1,3,2,'Parent',figure1);
hold(subplot2,'on');
image(Hedges_g_DS2,'Parent',subplot2,'CDataMapping','scaled');
title('DS2');
axis(subplot2,'tight');
axis(subplot2,'ij');
set(subplot2,'CLim',[-0.0708 6.3779],'DataAspectRatio',[1 1 1],'Layer','top','XTick', 1:N_RSN,'XTickLabel',...
    Yeo_RSN_names,'YTick',1:N_RSN,'YTickLabel',Yeo_RSN_names); caxis([0 3])

%%% Plot 3
subplot3 = subplot(1,3,3,'Parent',figure1);
hold(subplot3,'on');
image(Hedges_g_DS4,'Parent',subplot3,'CDataMapping','scaled');
title('DS4');
axis(subplot3,'tight');
axis(subplot3,'ij');
set(subplot3,'CLim',[-0.1021 9.0756],'DataAspectRatio',[1 1 1],'Layer','top','XTick', 1:N_RSN,'XTickLabel',...
    Yeo_RSN_names,'YTick',1:N_RSN,'YTickLabel',Yeo_RSN_names); caxis([0 3])
colorbar('peer',subplot3,'Position',[0.923131799536292 0.109165808444902 0.0142678794364187 0.814624098867147]);

%% Make a table for reporting the results
T = table(RSN_pairs, abs(Hedges_DS0), Conf_int1_DS0, Conf_int2_DS0, pValue_DS0, abs(Hedges_DS2), Conf_int1_DS2, Conf_int2_DS2, pValue_DS2, abs(Hedges_DS4), Conf_int1_DS4, Conf_int2_DS4, pValue_DS4)





